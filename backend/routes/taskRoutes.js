// backend/routes/taskRoutes.js (FINAL FIX)

// Assuming your backend uses ES modules (import/export)
import express from "express";
import {
  createTask,
  deleteTask,
  getTaskById,
  getTasks,
  updateTask,
  // ðŸ›‘ FIX 1: Import the new controller
  updateTaskStatus,
} from "../controllers/taskController.js";
import { protect } from "../middleware/auth.js"; // Authentication middleware

const router = express.Router();

// --- Main Routes: /api/tasks ---

/**
Â * @route Â  POST /api/tasks
Â * @desc Â  Â Create a new Task
Â * @access Â Private (protected by auth middleware)
Â * @route Â  GET /api/tasks
Â * @desc Â  Â Get all Tasks for the logged-in user
Â * @access Â Private
Â */
router.route("/")
Â  Â  .post(protect, createTask) 
Â  Â  .get(protect, getTasks); 


// --- Specific Task Routes: /api/tasks/:id ---

/**
Â * @route Â  GET /api/tasks/:id
Â * @desc Â  Â Fetch a single task by ID
Â * @access Â Private
Â * @route Â  PUT /api/tasks/:id
Â * @desc Â  Â Update a task by ID (General update)
Â * @access Â Private
Â * @route Â  DELETE /api/tasks/:id
Â * @desc Â  Â Delete a task by ID
Â * @access Â Private
Â */
router.route("/:id")
Â  Â  .get(protect, getTaskById) 
Â  Â  .put(protect, updateTask) 
Â  Â  .delete(protect, deleteTask); 

// --------------------------------------------------------------------------
// ðŸ›‘ FIX 2: Define the dedicated route for status updates
// --------------------------------------------------------------------------

/**
Â * @route Â  PATCH /api/tasks/:id/status
Â * @desc Â  Â Update ONLY the status of a Task/Event (Used by Kanban/Dropdown)
Â * @access Â Private
Â */
router.route("/:id/status").patch(protect, updateTaskStatus);


export default router;