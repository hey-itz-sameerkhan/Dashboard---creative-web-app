// backend/controllers/taskController.js (FINALIZED & FULLY FIXED)

import asyncHandler from 'express-async-handler';
import Notification from '../models/Notification.js';
import Task from '../models/Task.js';
import User from '../models/User.js';


// ------------------------------------------------
// --- HELPER FUNCTIONS FOR NOTIFICATION ---
// ------------------------------------------------

// 1. Assignment Notification (Used in createTask and updateTask for reassignment)
const createAssignmentNotification = async (task) => {
Â  Â  
Â  Â  // Format the date nicely for the message
Â  Â  const dueDate = new Date(task.startDateTime).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
Â  Â  const notificationMessage = `You have been assigned a new ${task.type}: "${task.title}". Due on: ${dueDate}.`;
Â  Â  
Â  Â  // Check if the assigned user exists and is different from the creator (to avoid self-notification)
Â  Â  if (task.assignedTo && !task.assignedTo.equals(task.createdBy)) {
Â  Â  Â  Â  await Notification.create({
Â  Â  Â  Â  Â  Â  userId: task.assignedTo, 
Â  Â  Â  Â  Â  Â  message: notificationMessage,
Â  Â  Â  Â  Â  Â  relatedId: task._id, 
Â  Â  Â  Â  Â  Â  read: false,
Â  Â  Â  Â  Â  Â  type: 'info', 
Â  Â  Â  Â  Â  Â  source: 'Task', 
Â  Â  Â  Â  });
Â  Â  }
};

// 2. Status Change Notification (Used in updateTaskStatus/updateTask to notify creator)
const createStatusChangeNotification = async (task, updaterId) => {
Â  Â  // Notify the creator if the person updating is NOT the creator
Â  Â  if (task.createdBy && !task.createdBy.equals(updaterId)) {
Â  Â  Â  Â  // Fetch updater's name for better message context
Â  Â  Â  Â  const updater = await User.findById(updaterId).select('name');
Â  Â  Â  Â  const notificationMessage = `${updater ? updater.name : 'A user'} updated your task: "${task.title}". New status: ${task.status}.`;
Â  Â  Â  Â  
Â  Â  Â  Â  await Notification.create({
Â  Â  Â  Â  Â  Â  userId: task.createdBy, // Notify the creator
Â  Â  Â  Â  Â  Â  message: notificationMessage,
Â  Â  Â  Â  Â  Â  relatedId: task._id,
Â  Â  Â  Â  Â  Â  read: false,
Â  Â  Â  Â  Â  Â  // Use 'success' type if task is completed
Â  Â  Â  Â  Â  Â  type: task.status === 'Completed' ? 'success' : 'info', 
Â  Â  Â  Â  Â  Â  source: 'Task',
Â  Â  Â  Â  });
Â  Â  }
};

// 3. High Priority Notification
const createHighPriorityNotification = async (task) => {
Â  Â  // Check for 'High' priority
Â  Â  if (task.priority === 'High') {
Â  Â  Â  Â  const dueDate = new Date(task.startDateTime).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
Â  Â  Â  Â  const highPriorityMessage = `ðŸš¨ URGENT: High Priority ${task.type} assigned: "${task.title}". Due on: ${dueDate}. Please review immediately.`;

Â  Â  Â  Â  // Notify the assigned user (Primary Recipient)
Â  Â  Â  Â  // Check to ensure assignedTo is set before creating notification
Â  Â  Â  Â  if (task.assignedTo) {
Â  Â  Â  Â  Â  Â  await Notification.create({
Â  Â  Â  Â  Â  Â  Â  Â  userId: task.assignedTo,
Â  Â  Â  Â  Â  Â  Â  Â  message: highPriorityMessage,
Â  Â  Â  Â  Â  Â  Â  Â  relatedId: task._id,
Â  Â  Â  Â  Â  Â  Â  Â  read: false,
Â  Â  Â  Â  Â  Â  Â  Â  type: 'error', // Use 'error' for highest visual urgency
Â  Â  Â  Â  Â  Â  Â  Â  source: 'Task',
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // Also notify the creator if they are different from the assignee
Â  Â  Â  Â  if (task.assignedTo && !task.createdBy.equals(task.assignedTo)) {
Â  Â  Â  Â  Â  Â  await Notification.create({
Â  Â  Â  Â  Â  Â  Â  Â  userId: task.createdBy,
Â  Â  Â  Â  Â  Â  Â  Â  message: highPriorityMessage,
Â  Â  Â  Â  Â  Â  Â  Â  relatedId: task._id,
Â  Â  Â  Â  Â  Â  Â  Â  read: false,
Â  Â  Â  Â  Â  Â  Â  Â  type: 'error',
Â  Â  Â  Â  Â  Â  Â  Â  source: 'Task',
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  }
};
// ------------------------------------------------

// @desc Â  Â Create a new Task/Event and send notification
// @route Â  POST /api/tasks
// @access Â Private
const createTask = asyncHandler(async (req, res) => {
Â  Â  const { title, description, startDateTime, endDateTime, priority, assignedTo, type, status } = req.body;

Â  Â  if (!title || !startDateTime || !type) {
Â  Â  Â  Â  res.status(400);
Â  Â  Â  Â  throw new Error('Please include a title, start date/time, and type for the task/event.');
Â  Â  }
Â  Â  
Â  Â  const finalAssignedTo = assignedTo || req.user._id;

Â  Â  const task = await Task.create({
Â  Â  Â  Â  title,
Â  Â  Â  Â  description,
Â  Â  Â  Â  startDateTime: startDateTime, 
Â  Â  Â  Â  endDateTime: endDateTime, Â  
Â  Â  Â  Â  priority: priority || 'Medium',
Â  Â  Â  Â  type,
Â  Â  Â  Â  assignedTo: finalAssignedTo, 
Â  Â  Â  Â  createdBy: req.user._id, 
Â  Â  Â  Â  status: status || 'Pending', 
Â  Â  });

Â  Â  if (task) {
Â  Â  Â  Â  await createAssignmentNotification(task);
Â  Â  Â  Â  await createHighPriorityNotification(task);

Â  Â  Â  Â  // Safe population method for newly created document
Â  Â  Â  Â  const populatedTask = await Task.findById(task._id)
Â  Â  Â  Â  Â  Â  .populate('assignedTo', 'name email')
Â  Â  Â  Â  Â  Â  .populate('createdBy', 'name');

Â  Â  Â  Â  res.status(201).json({
Â  Â  Â  Â  Â  Â  success: true,
Â  Â  Â  Â  Â  Â  message: `${populatedTask.type} created successfully.`,
Â  Â  Â  Â  Â  Â  task: populatedTask,
Â  Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  Â  res.status(400);
Â  Â  Â  Â  throw new Error('Invalid task data received.');
Â  Â  }
});

// @desc Â  Â Fetch all Tasks/Events for the Calendar
// @route Â  GET /api/tasks
// @access Â Private
const getTasks = asyncHandler(async (req, res) => {
Â  Â  const tasks = await Task.find({
Â  Â  Â  Â  $or: [{ assignedTo: req.user._id }, { createdBy: req.user._id }]
Â  Â  })
Â  Â  .populate('assignedTo', 'name email')
Â  Â  .populate('createdBy', 'name')
Â  Â  .sort({ startDateTime: 1, priority: -1 });

Â  Â  res.status(200).json(tasks);
});

// @desc Â  Â Fetch a single Task/Event by ID
// @route Â  GET /api/tasks/:id
// @access Â Private
const getTaskById = asyncHandler(async (req, res) => {
Â  Â  const task = await Task.findById(req.params.id)
Â  Â  Â  Â  .populate('assignedTo', 'name email')
Â  Â  Â  Â  .populate('createdBy', 'name');

Â  Â  if (!task) {
Â  Â  Â  Â  res.status(404);
Â  Â  Â  Â  throw new Error('Task/Event not found');
Â  Â  }

Â  Â  // Security Check: Only allow if user is the creator OR is the assigned user
Â  Â  const isCreator = task.createdBy.equals(req.user._id);
Â  Â  const isAssigned = task.assignedTo && task.assignedTo.equals(req.user._id);

Â  Â  if (!isCreator && !isAssigned) {
Â  Â  Â  Â  res.status(403);
Â  Â  Â  Â  throw new Error('Not authorized to view this task/event.');
Â  Â  }

Â  Â  res.status(200).json(task);
});


// @desc Â  Â Update a Task/Event (General Update - PUT /api/tasks/:id)
// @route Â  PUT /api/tasks/:id
// @access Â Private
const updateTask = asyncHandler(async (req, res) => {
Â  Â  const task = await Task.findById(req.params.id);

Â  Â  if (!task) {
Â  Â  Â  Â  res.status(404);
Â  Â  Â  Â  throw new Error('Task/Event not found');
Â  Â  }

Â  Â  // Security Check: (Unchanged)
Â  Â  const isCreator = task.createdBy.equals(req.user._id);
Â  Â  const isAssigned = task.assignedTo && task.assignedTo.equals(req.user._id);
Â  Â  
Â  Â  if (!isCreator && !isAssigned) {
Â  Â  Â  Â  res.status(403);
Â  Â  Â  Â  throw new Error('Not authorized to update this task/event. Only the creator or assigned user can update.');
Â  Â  }

Â  Â  // Capture old states for notification checks
Â  Â  const oldAssignedToId = task.assignedTo ? task.assignedTo.toString() : null;
Â  Â  const oldPriority = task.priority; 
Â  Â  const oldStatus = task.status;

Â  Â  // Update the task
Â  Â  task.set(req.body); 
Â  Â  await task.save({ runValidators: true }); // Save the unpopulated document
Â  Â  
Â  Â  // ðŸš€ FINAL FIX: Re-fetch the task using findById and populate in one reliable chain
Â  Â  const populatedTask = await Task.findById(task._id)
Â  Â  Â  Â  .populate('assignedTo', 'name email')
Â  Â  Â  Â  .populate('createdBy', 'name');

Â  Â  const newAssignedToId = populatedTask.assignedTo ? populatedTask.assignedTo._id.toString() : null;
Â  Â  const newPriority = populatedTask.priority;
Â  Â  const newStatus = populatedTask.status;


Â  Â  // Notification logic 
Â  Â  if (newAssignedToId && oldAssignedToId !== newAssignedToId) {
Â  Â  Â  Â  await createAssignmentNotification(populatedTask);
Â  Â  }
Â  Â  if (oldStatus !== newStatus) {
Â  Â  Â  Â  await createStatusChangeNotification(populatedTask, req.user._id);
Â  Â  }
Â  Â  if (newPriority === 'High' && oldPriority !== 'High') {
Â  Â  Â  Â  await createHighPriorityNotification(populatedTask);
Â  Â  }

Â  Â  res.json({ success: true, task: populatedTask, message: 'Task/Event updated successfully.' });
});

// ------------------------------------------------
// NEW CONTROLLER: UPDATE TASK STATUS ONLY 
// (PATCH /api/tasks/:id/status)
// ------------------------------------------------

// @desc Â  Â Update ONLY the status of a Task/Event
// @route Â  PATCH /api/tasks/:id/status
// @access Â Private
const updateTaskStatus = asyncHandler(async (req, res) => {
Â  Â  const { status } = req.body;
Â  Â  
Â  Â  if (!status) {
Â  Â  Â  Â  res.status(400);
Â  Â  Â  Â  throw new Error('Task status is required for this update.');
Â  Â  }

Â  Â  let task = await Task.findById(req.params.id);

Â  Â  if (!task) {
Â  Â  Â  Â  res.status(404);
Â  Â  Â  Â  throw new Error('Task/Event not found');
Â  Â  }

Â  Â  // Security Check: (Unchanged)
Â  Â  const isCreator = task.createdBy.equals(req.user._id);
Â  Â  const isAssigned = task.assignedTo && task.assignedTo.equals(req.user._id);

Â  Â  if (!isCreator && !isAssigned) {
Â  Â  Â  Â  res.status(403);
Â  Â  Â  Â  throw new Error('Not authorized to update the status of this task/event. Only the creator or assigned user can change status.');
Â  Â  }
Â  Â  
Â  Â  // Save old status for comparison
Â  Â  const oldStatus = task.status;

Â  Â  // Update the status and save
Â  Â  task.status = status;
Â  Â  await task.save(); 
Â  Â  
Â  Â  // ðŸš€ FINAL FIX: Re-fetch the task using findById and populate in one reliable chain
Â  Â  const populatedTask = await Task.findById(task._id)
Â  Â  Â  Â  .populate('assignedTo', 'name email')
Â  Â  Â  Â  .populate('createdBy', 'name');


Â  Â  // Notification Logic: Notify the creator if the status changes
Â  Â  if (oldStatus !== populatedTask.status) {
Â  Â  Â  Â  await createStatusChangeNotification(populatedTask, req.user._id);
Â  Â  }

Â  Â  res.json({ success: true, task: populatedTask, message: `Task status updated to ${populatedTask.status}.` });
});


// @desc Â  Â Delete a Task/Event
// @route Â  DELETE /api/tasks/:id
// @access Â Private
const deleteTask = asyncHandler(async (req, res) => {
Â  Â  const task = await Task.findById(req.params.id);

Â  Â  if (task) {
Â  Â  Â  Â  // Security Check: Only allow if user is the creator to delete the task
Â  Â  Â  Â  if (!task.createdBy.equals(req.user._id)) {
Â  Â  Â  Â  Â  Â  res.status(403);
Â  Â  Â  Â  Â  Â  throw new Error('Not authorized to delete this task/event. Only the creator can delete.');
Â  Â  Â  Â  }

Â  Â  Â  Â  await Task.deleteOne({ _id: req.params.id });

Â  Â  Â  Â  res.json({ success: true, message: 'Task/Event removed successfully.' });
Â  Â  } else {
Â  Â  Â  Â  res.status(404);
Â  Â  Â  Â  throw new Error('Task/Event not found');
Â  Â  }
});


// FINAL EXPORT: 
export {
    createTask,
    deleteTask,
    getTaskById,
    getTasks,
    updateTask,
    updateTaskStatus
};
