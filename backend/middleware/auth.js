// backend/middleware/auth.js

import asyncHandler from 'express-async-handler';
import jwt from "jsonwebtoken";
import User from '../models/User.js';

export const protect = asyncHandler(async (req, res, next) => {
Â  Â  let token;

Â  Â  // 1. Bearer Token Check (Frontend/Manual Auth)
Â  Â  const authHeader = req.headers.authorization;
Â  Â  if (authHeader && authHeader.startsWith("Bearer ")) {
Â  Â  Â  Â  token = authHeader.split(" ")[1];
Â  Â  } 
Â  Â  
Â  Â  // 2. Cookie Check (Google Auth)
Â  Â  if (!token && req.cookies && req.cookies.jwt) {
Â  Â  Â  Â  token = req.cookies.jwt;
Â  Â  }

Â  Â  if (!token) {
Â  Â  Â  Â  res.status(401);
Â  Â  Â  Â  throw new Error("Not authorized â€” token missing or invalid.");
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  // 3. Verify token
Â  Â  Â  Â  const decoded = jwt.verify(token, process.env.JWT_SECRET);
Â  Â  Â  Â  
Â  Â  Â  Â  // 4. Extract User ID
Â  Â  Â  Â  // Token payload se ID nikaalte hain (chahe 'id' ho ya 'userId')
Â  Â  Â  Â  const userId = decoded.userId || decoded.id; 

Â  Â  Â  Â  if (!userId) {
Â  Â  Â  Â  Â  Â res.status(401);
Â  Â  Â  Â  Â  Â throw new Error("Not authorized â€” Invalid token payload (ID missing).");
Â  Â  Â  Â  }

Â  Â  Â  Â  // 5. Get the full user object from the database, excluding password
Â  Â  Â  Â  const user = await User.findById(userId).select('-password');
Â  Â  Â  Â  
Â  Â  Â  Â  if (!user) {
Â  Â  Â  Â  Â  Â  res.status(404);
Â  Â  Â  Â  Â  Â  throw new Error("User not found.");
Â  Â  Â  Â  }

Â  Â  Â  Â  // 6. IMPORTANT FIX: Attach the Mongoose user object to req.user.
Â  Â  Â  Â  // Mongoose automatically provides the virtual 'id' getter, 
Â  Â  Â  Â  // but explicitly defining it here ensures compatibility everywhere.
Â  Â  Â  Â  req.user = user; 
        
        // ðŸ’¡ Multer aur purane logic ke liye compatibility add karein:
        // req.user.id ab req.user._id ki value ko point karega.
        req.user.id = user._id.toString();
        
Â  Â  Â  Â  next();
Â  Â  } catch (error) {
Â  Â  Â  Â  // Token verification failed (e.g., expired, modified, bad signature)
Â  Â  Â  Â  res.status(401); 
Â  Â  Â  Â  throw new Error("Not authorized â€” invalid or expired token.");
Â  Â  }
});